<?php
/**
 * BasketItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * BasketItem Class Doc Comment
 *
 * @category Class
 * @description Item details.
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BasketItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BasketItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'description' => 'string',
        'subTotal' => 'float',
        'valueAddedTax' => 'float',
        'localTax' => 'float',
        'deliveryAmount' => 'float',
        'chargeTotal' => 'float',
        'currency' => 'string',
        'quantity' => 'int',
        'category' => 'string',
        'detailedCategory' => 'string',
        'options' => '\FirstData\FirstApi\Client\Model\Option[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'description' => null,
        'subTotal' => null,
        'valueAddedTax' => null,
        'localTax' => null,
        'deliveryAmount' => null,
        'chargeTotal' => null,
        'currency' => null,
        'quantity' => 'int64',
        'category' => null,
        'detailedCategory' => null,
        'options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'subTotal' => 'subTotal',
        'valueAddedTax' => 'valueAddedTax',
        'localTax' => 'localTax',
        'deliveryAmount' => 'deliveryAmount',
        'chargeTotal' => 'chargeTotal',
        'currency' => 'currency',
        'quantity' => 'quantity',
        'category' => 'category',
        'detailedCategory' => 'detailedCategory',
        'options' => 'options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'subTotal' => 'setSubTotal',
        'valueAddedTax' => 'setValueAddedTax',
        'localTax' => 'setLocalTax',
        'deliveryAmount' => 'setDeliveryAmount',
        'chargeTotal' => 'setChargeTotal',
        'currency' => 'setCurrency',
        'quantity' => 'setQuantity',
        'category' => 'setCategory',
        'detailedCategory' => 'setDetailedCategory',
        'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'subTotal' => 'getSubTotal',
        'valueAddedTax' => 'getValueAddedTax',
        'localTax' => 'getLocalTax',
        'deliveryAmount' => 'getDeliveryAmount',
        'chargeTotal' => 'getChargeTotal',
        'currency' => 'getCurrency',
        'quantity' => 'getQuantity',
        'category' => 'getCategory',
        'detailedCategory' => 'getDetailedCategory',
        'options' => 'getOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['subTotal'] = isset($data['subTotal']) ? $data['subTotal'] : null;
        $this->container['valueAddedTax'] = isset($data['valueAddedTax']) ? $data['valueAddedTax'] : null;
        $this->container['localTax'] = isset($data['localTax']) ? $data['localTax'] : null;
        $this->container['deliveryAmount'] = isset($data['deliveryAmount']) ? $data['deliveryAmount'] : null;
        $this->container['chargeTotal'] = isset($data['chargeTotal']) ? $data['chargeTotal'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['detailedCategory'] = isset($data['detailedCategory']) ? $data['detailedCategory'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['currency']) && !preg_match("/([A-Z]{3})|([0-9]{3})/", $this->container['currency'])) {
            $invalidProperties[] = "invalid value for 'currency', must be conform to the pattern /([A-Z]{3})|([0-9]{3})/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id A unique ID associated with the product.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A name or short description of the product.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets subTotal
     *
     * @return float|null
     */
    public function getSubTotal()
    {
        return $this->container['subTotal'];
    }

    /**
     * Sets subTotal
     *
     * @param float|null $subTotal Subtotal amount.
     *
     * @return $this
     */
    public function setSubTotal($subTotal)
    {
        $this->container['subTotal'] = $subTotal;

        return $this;
    }

    /**
     * Gets valueAddedTax
     *
     * @return float|null
     */
    public function getValueAddedTax()
    {
        return $this->container['valueAddedTax'];
    }

    /**
     * Sets valueAddedTax
     *
     * @param float|null $valueAddedTax Value added tax amount.
     *
     * @return $this
     */
    public function setValueAddedTax($valueAddedTax)
    {
        $this->container['valueAddedTax'] = $valueAddedTax;

        return $this;
    }

    /**
     * Gets localTax
     *
     * @return float|null
     */
    public function getLocalTax()
    {
        return $this->container['localTax'];
    }

    /**
     * Sets localTax
     *
     * @param float|null $localTax Local tax amount.
     *
     * @return $this
     */
    public function setLocalTax($localTax)
    {
        $this->container['localTax'] = $localTax;

        return $this;
    }

    /**
     * Gets deliveryAmount
     *
     * @return float|null
     */
    public function getDeliveryAmount()
    {
        return $this->container['deliveryAmount'];
    }

    /**
     * Sets deliveryAmount
     *
     * @param float|null $deliveryAmount Delivery amount.
     *
     * @return $this
     */
    public function setDeliveryAmount($deliveryAmount)
    {
        $this->container['deliveryAmount'] = $deliveryAmount;

        return $this;
    }

    /**
     * Gets chargeTotal
     *
     * @return float|null
     */
    public function getChargeTotal()
    {
        return $this->container['chargeTotal'];
    }

    /**
     * Sets chargeTotal
     *
     * @param float|null $chargeTotal Charge Total amount.
     *
     * @return $this
     */
    public function setChargeTotal($chargeTotal)
    {
        $this->container['chargeTotal'] = $chargeTotal;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency of the original transaction.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {

        if (!is_null($currency) && (!preg_match("/([A-Z]{3})|([0-9]{3})/", $currency))) {
            throw new \InvalidArgumentException("invalid value for $currency when calling BasketItem., must conform to the pattern /([A-Z]{3})|([0-9]{3})/.");
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The unit in which the product is sold (e.g. litre, kilogram, etc). Leave empty if the product is sold as a complete unit.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category of the product.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets detailedCategory
     *
     * @return string|null
     */
    public function getDetailedCategory()
    {
        return $this->container['detailedCategory'];
    }

    /**
     * Sets detailedCategory
     *
     * @param string|null $detailedCategory Detailed Category of the product.
     *
     * @return $this
     */
    public function setDetailedCategory($detailedCategory)
    {
        $this->container['detailedCategory'] = $detailedCategory;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \FirstData\FirstApi\Client\Model\Option[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \FirstData\FirstApi\Client\Model\Option[]|null $options Option details
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


