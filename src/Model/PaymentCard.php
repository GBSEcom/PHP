<?php
/**
 * PaymentCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * PaymentCard Class Doc Comment
 *
 * @category Class
 * @description Payment card model
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentCard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'expiryDate' => '\FirstData\FirstApi\Client\Model\Expiration',
        'securityCode' => 'string',
        'paymentTokenization' => '\FirstData\FirstApi\Client\Model\PaymentTokenization',
        'cardFunction' => 'string',
        'cardholderName' => 'string',
        'authenticationRequest' => '\FirstData\FirstApi\Client\Model\AuthenticationRequest',
        'authenticationResult' => '\FirstData\FirstApi\Client\Model\PaymentCardAuthenticationResult',
        'bin' => 'string',
        'last4' => 'string',
        'brand' => 'string',
        'issuingCountry' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'number' => null,
        'expiryDate' => null,
        'securityCode' => null,
        'paymentTokenization' => null,
        'cardFunction' => null,
        'cardholderName' => null,
        'authenticationRequest' => null,
        'authenticationResult' => null,
        'bin' => null,
        'last4' => null,
        'brand' => null,
        'issuingCountry' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'expiryDate' => 'expiryDate',
        'securityCode' => 'securityCode',
        'paymentTokenization' => 'paymentTokenization',
        'cardFunction' => 'cardFunction',
        'cardholderName' => 'cardholderName',
        'authenticationRequest' => 'authenticationRequest',
        'authenticationResult' => 'authenticationResult',
        'bin' => 'bin',
        'last4' => 'last4',
        'brand' => 'brand',
        'issuingCountry' => 'issuingCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'expiryDate' => 'setExpiryDate',
        'securityCode' => 'setSecurityCode',
        'paymentTokenization' => 'setPaymentTokenization',
        'cardFunction' => 'setCardFunction',
        'cardholderName' => 'setCardholderName',
        'authenticationRequest' => 'setAuthenticationRequest',
        'authenticationResult' => 'setAuthenticationResult',
        'bin' => 'setBin',
        'last4' => 'setLast4',
        'brand' => 'setBrand',
        'issuingCountry' => 'setIssuingCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'expiryDate' => 'getExpiryDate',
        'securityCode' => 'getSecurityCode',
        'paymentTokenization' => 'getPaymentTokenization',
        'cardFunction' => 'getCardFunction',
        'cardholderName' => 'getCardholderName',
        'authenticationRequest' => 'getAuthenticationRequest',
        'authenticationResult' => 'getAuthenticationResult',
        'bin' => 'getBin',
        'last4' => 'getLast4',
        'brand' => 'getBrand',
        'issuingCountry' => 'getIssuingCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['expiryDate'] = isset($data['expiryDate']) ? $data['expiryDate'] : null;
        $this->container['securityCode'] = isset($data['securityCode']) ? $data['securityCode'] : null;
        $this->container['paymentTokenization'] = isset($data['paymentTokenization']) ? $data['paymentTokenization'] : null;
        $this->container['cardFunction'] = isset($data['cardFunction']) ? $data['cardFunction'] : null;
        $this->container['cardholderName'] = isset($data['cardholderName']) ? $data['cardholderName'] : null;
        $this->container['authenticationRequest'] = isset($data['authenticationRequest']) ? $data['authenticationRequest'] : null;
        $this->container['authenticationResult'] = isset($data['authenticationResult']) ? $data['authenticationResult'] : null;
        $this->container['bin'] = isset($data['bin']) ? $data['bin'] : null;
        $this->container['last4'] = isset($data['last4']) ? $data['last4'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['issuingCountry'] = isset($data['issuingCountry']) ? $data['issuingCountry'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 19)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) < 13)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be bigger than or equal to 13.";
        }

        if (!is_null($this->container['number']) && !preg_match("/[0-9]{13,19}/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /[0-9]{13,19}/.";
        }

        if (!is_null($this->container['securityCode']) && (mb_strlen($this->container['securityCode']) > 4)) {
            $invalidProperties[] = "invalid value for 'securityCode', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['securityCode']) && (mb_strlen($this->container['securityCode']) < 3)) {
            $invalidProperties[] = "invalid value for 'securityCode', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['cardholderName']) && (mb_strlen($this->container['cardholderName']) > 96)) {
            $invalidProperties[] = "invalid value for 'cardholderName', the character length must be smaller than or equal to 96.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Payment card number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (mb_strlen($number) > 19)) {
            throw new \InvalidArgumentException('invalid length for $number when calling PaymentCard., must be smaller than or equal to 19.');
        }
        if (!is_null($number) && (mb_strlen($number) < 13)) {
            throw new \InvalidArgumentException('invalid length for $number when calling PaymentCard., must be bigger than or equal to 13.');
        }
        if (!is_null($number) && (!preg_match("/[0-9]{13,19}/", $number))) {
            throw new \InvalidArgumentException("invalid value for $number when calling PaymentCard., must conform to the pattern /[0-9]{13,19}/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets expiryDate
     *
     * @return \FirstData\FirstApi\Client\Model\Expiration|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiryDate'];
    }

    /**
     * Sets expiryDate
     *
     * @param \FirstData\FirstApi\Client\Model\Expiration|null $expiryDate expiryDate
     *
     * @return $this
     */
    public function setExpiryDate($expiryDate)
    {
        $this->container['expiryDate'] = $expiryDate;

        return $this;
    }

    /**
     * Gets securityCode
     *
     * @return string|null
     */
    public function getSecurityCode()
    {
        return $this->container['securityCode'];
    }

    /**
     * Sets securityCode
     *
     * @param string|null $securityCode Card Verification Value/Number
     *
     * @return $this
     */
    public function setSecurityCode($securityCode)
    {
        if (!is_null($securityCode) && (mb_strlen($securityCode) > 4)) {
            throw new \InvalidArgumentException('invalid length for $securityCode when calling PaymentCard., must be smaller than or equal to 4.');
        }
        if (!is_null($securityCode) && (mb_strlen($securityCode) < 3)) {
            throw new \InvalidArgumentException('invalid length for $securityCode when calling PaymentCard., must be bigger than or equal to 3.');
        }

        $this->container['securityCode'] = $securityCode;

        return $this;
    }

    /**
     * Gets paymentTokenization
     *
     * @return \FirstData\FirstApi\Client\Model\PaymentTokenization|null
     */
    public function getPaymentTokenization()
    {
        return $this->container['paymentTokenization'];
    }

    /**
     * Sets paymentTokenization
     *
     * @param \FirstData\FirstApi\Client\Model\PaymentTokenization|null $paymentTokenization paymentTokenization
     *
     * @return $this
     */
    public function setPaymentTokenization($paymentTokenization)
    {
        $this->container['paymentTokenization'] = $paymentTokenization;

        return $this;
    }

    /**
     * Gets cardFunction
     *
     * @return string|null
     */
    public function getCardFunction()
    {
        return $this->container['cardFunction'];
    }

    /**
     * Sets cardFunction
     *
     * @param string|null $cardFunction Card function. Optional, valid values are CREDIT or DEBIT.
     *
     * @return $this
     */
    public function setCardFunction($cardFunction)
    {
        $this->container['cardFunction'] = $cardFunction;

        return $this;
    }

    /**
     * Gets cardholderName
     *
     * @return string|null
     */
    public function getCardholderName()
    {
        return $this->container['cardholderName'];
    }

    /**
     * Sets cardholderName
     *
     * @param string|null $cardholderName Name of the cardholder on the card
     *
     * @return $this
     */
    public function setCardholderName($cardholderName)
    {
        if (!is_null($cardholderName) && (mb_strlen($cardholderName) > 96)) {
            throw new \InvalidArgumentException('invalid length for $cardholderName when calling PaymentCard., must be smaller than or equal to 96.');
        }

        $this->container['cardholderName'] = $cardholderName;

        return $this;
    }

    /**
     * Gets authenticationRequest
     *
     * @return \FirstData\FirstApi\Client\Model\AuthenticationRequest|null
     */
    public function getAuthenticationRequest()
    {
        return $this->container['authenticationRequest'];
    }

    /**
     * Sets authenticationRequest
     *
     * @param \FirstData\FirstApi\Client\Model\AuthenticationRequest|null $authenticationRequest authenticationRequest
     *
     * @return $this
     */
    public function setAuthenticationRequest($authenticationRequest)
    {
        $this->container['authenticationRequest'] = $authenticationRequest;

        return $this;
    }

    /**
     * Gets authenticationResult
     *
     * @return \FirstData\FirstApi\Client\Model\PaymentCardAuthenticationResult|null
     */
    public function getAuthenticationResult()
    {
        return $this->container['authenticationResult'];
    }

    /**
     * Sets authenticationResult
     *
     * @param \FirstData\FirstApi\Client\Model\PaymentCardAuthenticationResult|null $authenticationResult authenticationResult
     *
     * @return $this
     */
    public function setAuthenticationResult($authenticationResult)
    {
        $this->container['authenticationResult'] = $authenticationResult;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return string|null
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param string|null $bin The payment card BIN
     *
     * @return $this
     */
    public function setBin($bin)
    {
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets last4
     *
     * @return string|null
     */
    public function getLast4()
    {
        return $this->container['last4'];
    }

    /**
     * Sets last4
     *
     * @param string|null $last4 The last 4 payment card numbers
     *
     * @return $this
     */
    public function setLast4($last4)
    {
        $this->container['last4'] = $last4;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Optional, required only if using dual branded card
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets issuingCountry
     *
     * @return string|null
     */
    public function getIssuingCountry()
    {
        return $this->container['issuingCountry'];
    }

    /**
     * Sets issuingCountry
     *
     * @param string|null $issuingCountry The issuing country
     *
     * @return $this
     */
    public function setIssuingCountry($issuingCountry)
    {
        $this->container['issuingCountry'] = $issuingCountry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


