<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @description This is the common object for transaction
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transactionState' => 'string',
        'ipgTransactionId' => 'string',
        'orderId' => 'string',
        'transactionType' => '\FirstData\FirstApi\Client\Model\TransactionType',
        'paymentMethod' => '\FirstData\FirstApi\Client\Model\PaymentMethod',
        'amount' => '\FirstData\FirstApi\Client\Model\Amount',
        'submissionComponent' => 'string',
        'payerSecurityLevel' => 'string',
        'transactionTime' => 'int',
        'storeId' => 'string',
        'userId' => 'string',
        'processor' => '\FirstData\FirstApi\Client\Model\ProcessorData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'transactionState' => null,
        'ipgTransactionId' => null,
        'orderId' => null,
        'transactionType' => null,
        'paymentMethod' => null,
        'amount' => null,
        'submissionComponent' => null,
        'payerSecurityLevel' => null,
        'transactionTime' => 'int64',
        'storeId' => null,
        'userId' => null,
        'processor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transactionState' => 'transactionState',
        'ipgTransactionId' => 'ipgTransactionId',
        'orderId' => 'orderId',
        'transactionType' => 'transactionType',
        'paymentMethod' => 'paymentMethod',
        'amount' => 'amount',
        'submissionComponent' => 'submissionComponent',
        'payerSecurityLevel' => 'payerSecurityLevel',
        'transactionTime' => 'transactionTime',
        'storeId' => 'storeId',
        'userId' => 'userId',
        'processor' => 'processor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transactionState' => 'setTransactionState',
        'ipgTransactionId' => 'setIpgTransactionId',
        'orderId' => 'setOrderId',
        'transactionType' => 'setTransactionType',
        'paymentMethod' => 'setPaymentMethod',
        'amount' => 'setAmount',
        'submissionComponent' => 'setSubmissionComponent',
        'payerSecurityLevel' => 'setPayerSecurityLevel',
        'transactionTime' => 'setTransactionTime',
        'storeId' => 'setStoreId',
        'userId' => 'setUserId',
        'processor' => 'setProcessor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transactionState' => 'getTransactionState',
        'ipgTransactionId' => 'getIpgTransactionId',
        'orderId' => 'getOrderId',
        'transactionType' => 'getTransactionType',
        'paymentMethod' => 'getPaymentMethod',
        'amount' => 'getAmount',
        'submissionComponent' => 'getSubmissionComponent',
        'payerSecurityLevel' => 'getPayerSecurityLevel',
        'transactionTime' => 'getTransactionTime',
        'storeId' => 'getStoreId',
        'userId' => 'getUserId',
        'processor' => 'getProcessor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TRANSACTION_STATE_AUTHORIZED = 'AUTHORIZED';
    const TRANSACTION_STATE_CAPTURED = 'CAPTURED';
    const TRANSACTION_STATE_COMPLETED_GET = 'COMPLETED_GET';
    const TRANSACTION_STATE_DECLINED = 'DECLINED';
    const TRANSACTION_STATE_CHECKED = 'CHECKED';
    const TRANSACTION_STATE_INITIALIZED = 'INITIALIZED';
    const TRANSACTION_STATE_PENDING_AUTHORIZATION = 'PENDING_AUTHORIZATION';
    const TRANSACTION_STATE_PENDING_AUTOVOID = 'PENDING_AUTOVOID';
    const TRANSACTION_STATE_PENDING_CAPTURE = 'PENDING_CAPTURE';
    const TRANSACTION_STATE_PENDING_CREDIT = 'PENDING_CREDIT';
    const TRANSACTION_STATE_PENDING_GIROPAY_INIT = 'PENDING_GIROPAY_INIT';
    const TRANSACTION_STATE_PENDING_IDEAL_INIT = 'PENDING_IDEAL_INIT';
    const TRANSACTION_STATE_PENDING_INIT = 'PENDING_INIT';
    const TRANSACTION_STATE_PENDING_READY = 'PENDING_READY';
    const TRANSACTION_STATE_PENDING_RETURN = 'PENDING_RETURN';
    const TRANSACTION_STATE_PENDING_SETTLEMENT = 'PENDING_SETTLEMENT';
    const TRANSACTION_STATE_PENDING_SOFORT_INIT = 'PENDING_SOFORT_INIT';
    const TRANSACTION_STATE_PENDING_VOID = 'PENDING_VOID';
    const TRANSACTION_STATE_READY = 'READY';
    const TRANSACTION_STATE_SETTLED = 'SETTLED';
    const TRANSACTION_STATE_VOIDED = 'VOIDED';
    const TRANSACTION_STATE_WAITING = 'WAITING';
    const TRANSACTION_STATE_WAITING_AUTHENTICATION = 'WAITING_AUTHENTICATION';
    const TRANSACTION_STATE_WAITING_3_D_SECURE = 'WAITING_3D_SECURE';
    const TRANSACTION_STATE_WAITING_CLICK_AND_BUY = 'WAITING_CLICK_AND_BUY';
    const TRANSACTION_STATE_WAITING_GIROPAY = 'WAITING_GIROPAY';
    const TRANSACTION_STATE_WAITING_IDEAL = 'WAITING_IDEAL';
    const TRANSACTION_STATE_WAITING_KLARNA = 'WAITING_KLARNA';
    const TRANSACTION_STATE_WAITING_PAYPAL = 'WAITING_PAYPAL';
    const TRANSACTION_STATE_WAITING_PAYPAL_EVENT = 'WAITING_PAYPAL_EVENT';
    const TRANSACTION_STATE_WAITING_PPRO_LONG_WAITING = 'WAITING_PPRO_LONG_WAITING';
    const TRANSACTION_STATE_WAITING_SOFORT = 'WAITING_SOFORT';
    const TRANSACTION_STATE_WAITING_T_PAY = 'WAITING_T_PAY';
    const TRANSACTION_STATE_WAITING_ALIPAY_PAYSECURE = 'WAITING_ALIPAY_PAYSECURE';
    const SUBMISSION_COMPONENT_API = 'API';
    const SUBMISSION_COMPONENT_BUS = 'BUS';
    const SUBMISSION_COMPONENT_CONNECT = 'CONNECT';
    const SUBMISSION_COMPONENT_CORE = 'CORE';
    const SUBMISSION_COMPONENT_EPAS = 'EPAS';
    const SUBMISSION_COMPONENT_MCS = 'MCS';
    const SUBMISSION_COMPONENT_RESTAPI = 'RESTAPI';
    const SUBMISSION_COMPONENT__SWITCH = 'SWITCH';
    const SUBMISSION_COMPONENT_VT = 'VT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionStateAllowableValues()
    {
        return [
            self::TRANSACTION_STATE_AUTHORIZED,
            self::TRANSACTION_STATE_CAPTURED,
            self::TRANSACTION_STATE_COMPLETED_GET,
            self::TRANSACTION_STATE_DECLINED,
            self::TRANSACTION_STATE_CHECKED,
            self::TRANSACTION_STATE_INITIALIZED,
            self::TRANSACTION_STATE_PENDING_AUTHORIZATION,
            self::TRANSACTION_STATE_PENDING_AUTOVOID,
            self::TRANSACTION_STATE_PENDING_CAPTURE,
            self::TRANSACTION_STATE_PENDING_CREDIT,
            self::TRANSACTION_STATE_PENDING_GIROPAY_INIT,
            self::TRANSACTION_STATE_PENDING_IDEAL_INIT,
            self::TRANSACTION_STATE_PENDING_INIT,
            self::TRANSACTION_STATE_PENDING_READY,
            self::TRANSACTION_STATE_PENDING_RETURN,
            self::TRANSACTION_STATE_PENDING_SETTLEMENT,
            self::TRANSACTION_STATE_PENDING_SOFORT_INIT,
            self::TRANSACTION_STATE_PENDING_VOID,
            self::TRANSACTION_STATE_READY,
            self::TRANSACTION_STATE_SETTLED,
            self::TRANSACTION_STATE_VOIDED,
            self::TRANSACTION_STATE_WAITING,
            self::TRANSACTION_STATE_WAITING_AUTHENTICATION,
            self::TRANSACTION_STATE_WAITING_3_D_SECURE,
            self::TRANSACTION_STATE_WAITING_CLICK_AND_BUY,
            self::TRANSACTION_STATE_WAITING_GIROPAY,
            self::TRANSACTION_STATE_WAITING_IDEAL,
            self::TRANSACTION_STATE_WAITING_KLARNA,
            self::TRANSACTION_STATE_WAITING_PAYPAL,
            self::TRANSACTION_STATE_WAITING_PAYPAL_EVENT,
            self::TRANSACTION_STATE_WAITING_PPRO_LONG_WAITING,
            self::TRANSACTION_STATE_WAITING_SOFORT,
            self::TRANSACTION_STATE_WAITING_T_PAY,
            self::TRANSACTION_STATE_WAITING_ALIPAY_PAYSECURE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmissionComponentAllowableValues()
    {
        return [
            self::SUBMISSION_COMPONENT_API,
            self::SUBMISSION_COMPONENT_BUS,
            self::SUBMISSION_COMPONENT_CONNECT,
            self::SUBMISSION_COMPONENT_CORE,
            self::SUBMISSION_COMPONENT_EPAS,
            self::SUBMISSION_COMPONENT_MCS,
            self::SUBMISSION_COMPONENT_RESTAPI,
            self::SUBMISSION_COMPONENT__SWITCH,
            self::SUBMISSION_COMPONENT_VT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transactionState'] = isset($data['transactionState']) ? $data['transactionState'] : null;
        $this->container['ipgTransactionId'] = isset($data['ipgTransactionId']) ? $data['ipgTransactionId'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['transactionType'] = isset($data['transactionType']) ? $data['transactionType'] : null;
        $this->container['paymentMethod'] = isset($data['paymentMethod']) ? $data['paymentMethod'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['submissionComponent'] = isset($data['submissionComponent']) ? $data['submissionComponent'] : null;
        $this->container['payerSecurityLevel'] = isset($data['payerSecurityLevel']) ? $data['payerSecurityLevel'] : null;
        $this->container['transactionTime'] = isset($data['transactionTime']) ? $data['transactionTime'] : null;
        $this->container['storeId'] = isset($data['storeId']) ? $data['storeId'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['processor'] = isset($data['processor']) ? $data['processor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionStateAllowableValues();
        if (!is_null($this->container['transactionState']) && !in_array($this->container['transactionState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transactionState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubmissionComponentAllowableValues();
        if (!is_null($this->container['submissionComponent']) && !in_array($this->container['submissionComponent'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'submissionComponent', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transactionState
     *
     * @return string|null
     */
    public function getTransactionState()
    {
        return $this->container['transactionState'];
    }

    /**
     * Sets transactionState
     *
     * @param string|null $transactionState The state of the transaction.
     *
     * @return $this
     */
    public function setTransactionState($transactionState)
    {
        $allowedValues = $this->getTransactionStateAllowableValues();
        if (!is_null($transactionState) && !in_array($transactionState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transactionState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transactionState'] = $transactionState;

        return $this;
    }

    /**
     * Gets ipgTransactionId
     *
     * @return string|null
     */
    public function getIpgTransactionId()
    {
        return $this->container['ipgTransactionId'];
    }

    /**
     * Sets ipgTransactionId
     *
     * @param string|null $ipgTransactionId The transaction ID
     *
     * @return $this
     */
    public function setIpgTransactionId($ipgTransactionId)
    {
        $this->container['ipgTransactionId'] = $ipgTransactionId;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId Client order ID if supplied by client.
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets transactionType
     *
     * @return \FirstData\FirstApi\Client\Model\TransactionType|null
     */
    public function getTransactionType()
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param \FirstData\FirstApi\Client\Model\TransactionType|null $transactionType transactionType
     *
     * @return $this
     */
    public function setTransactionType($transactionType)
    {
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \FirstData\FirstApi\Client\Model\PaymentMethod|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \FirstData\FirstApi\Client\Model\PaymentMethod|null $paymentMethod paymentMethod
     *
     * @return $this
     */
    public function setPaymentMethod($paymentMethod)
    {
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \FirstData\FirstApi\Client\Model\Amount|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \FirstData\FirstApi\Client\Model\Amount|null $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets submissionComponent
     *
     * @return string|null
     */
    public function getSubmissionComponent()
    {
        return $this->container['submissionComponent'];
    }

    /**
     * Sets submissionComponent
     *
     * @param string|null $submissionComponent The submission component.
     *
     * @return $this
     */
    public function setSubmissionComponent($submissionComponent)
    {
        $allowedValues = $this->getSubmissionComponentAllowableValues();
        if (!is_null($submissionComponent) && !in_array($submissionComponent, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'submissionComponent', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submissionComponent'] = $submissionComponent;

        return $this;
    }

    /**
     * Gets payerSecurityLevel
     *
     * @return string|null
     */
    public function getPayerSecurityLevel()
    {
        return $this->container['payerSecurityLevel'];
    }

    /**
     * Sets payerSecurityLevel
     *
     * @param string|null $payerSecurityLevel The payer security level.
     *
     * @return $this
     */
    public function setPayerSecurityLevel($payerSecurityLevel)
    {
        $this->container['payerSecurityLevel'] = $payerSecurityLevel;

        return $this;
    }

    /**
     * Gets transactionTime
     *
     * @return int|null
     */
    public function getTransactionTime()
    {
        return $this->container['transactionTime'];
    }

    /**
     * Sets transactionTime
     *
     * @param int|null $transactionTime The transaction time in seconds since Epoch
     *
     * @return $this
     */
    public function setTransactionTime($transactionTime)
    {
        $this->container['transactionTime'] = $transactionTime;

        return $this;
    }

    /**
     * Gets storeId
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     *
     * @param string|null $storeId Store ID number.
     *
     * @return $this
     */
    public function setStoreId($storeId)
    {
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string|null $userId The user ID.
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets processor
     *
     * @return \FirstData\FirstApi\Client\Model\ProcessorData|null
     */
    public function getProcessor()
    {
        return $this->container['processor'];
    }

    /**
     * Sets processor
     *
     * @param \FirstData\FirstApi\Client\Model\ProcessorData|null $processor processor
     *
     * @return $this
     */
    public function setProcessor($processor)
    {
        $this->container['processor'] = $processor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


