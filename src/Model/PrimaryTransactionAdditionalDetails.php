<?php
/**
 * PrimaryTransactionAdditionalDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * PrimaryTransactionAdditionalDetails Class Doc Comment
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PrimaryTransactionAdditionalDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrimaryTransaction_additionalDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'referenceNumber' => 'string',
        'comments' => 'string',
        'dynamicMerchantName' => 'string',
        'invoiceNumber' => 'string',
        'purchaseOrderNumber' => 'string',
        'recurringType' => 'string',
        'installmentOptions' => '\FirstData\FirstApi\Client\Model\InstallmentOptions',
        'mcc' => 'string',
        'dcc' => '\FirstData\FirstApi\Client\Model\Dcc'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'referenceNumber' => null,
        'comments' => null,
        'dynamicMerchantName' => null,
        'invoiceNumber' => null,
        'purchaseOrderNumber' => null,
        'recurringType' => null,
        'installmentOptions' => null,
        'mcc' => null,
        'dcc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'referenceNumber' => 'referenceNumber',
        'comments' => 'comments',
        'dynamicMerchantName' => 'dynamicMerchantName',
        'invoiceNumber' => 'invoiceNumber',
        'purchaseOrderNumber' => 'purchaseOrderNumber',
        'recurringType' => 'recurringType',
        'installmentOptions' => 'installmentOptions',
        'mcc' => 'mcc',
        'dcc' => 'dcc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'referenceNumber' => 'setReferenceNumber',
        'comments' => 'setComments',
        'dynamicMerchantName' => 'setDynamicMerchantName',
        'invoiceNumber' => 'setInvoiceNumber',
        'purchaseOrderNumber' => 'setPurchaseOrderNumber',
        'recurringType' => 'setRecurringType',
        'installmentOptions' => 'setInstallmentOptions',
        'mcc' => 'setMcc',
        'dcc' => 'setDcc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'referenceNumber' => 'getReferenceNumber',
        'comments' => 'getComments',
        'dynamicMerchantName' => 'getDynamicMerchantName',
        'invoiceNumber' => 'getInvoiceNumber',
        'purchaseOrderNumber' => 'getPurchaseOrderNumber',
        'recurringType' => 'getRecurringType',
        'installmentOptions' => 'getInstallmentOptions',
        'mcc' => 'getMcc',
        'dcc' => 'getDcc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['referenceNumber'] = isset($data['referenceNumber']) ? $data['referenceNumber'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['dynamicMerchantName'] = isset($data['dynamicMerchantName']) ? $data['dynamicMerchantName'] : null;
        $this->container['invoiceNumber'] = isset($data['invoiceNumber']) ? $data['invoiceNumber'] : null;
        $this->container['purchaseOrderNumber'] = isset($data['purchaseOrderNumber']) ? $data['purchaseOrderNumber'] : null;
        $this->container['recurringType'] = isset($data['recurringType']) ? $data['recurringType'] : null;
        $this->container['installmentOptions'] = isset($data['installmentOptions']) ? $data['installmentOptions'] : null;
        $this->container['mcc'] = isset($data['mcc']) ? $data['mcc'] : null;
        $this->container['dcc'] = isset($data['dcc']) ? $data['dcc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['referenceNumber']) && (mb_strlen($this->container['referenceNumber']) > 8)) {
            $invalidProperties[] = "invalid value for 'referenceNumber', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 1024)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['dynamicMerchantName']) && (mb_strlen($this->container['dynamicMerchantName']) > 100)) {
            $invalidProperties[] = "invalid value for 'dynamicMerchantName', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['invoiceNumber']) && (mb_strlen($this->container['invoiceNumber']) > 48)) {
            $invalidProperties[] = "invalid value for 'invoiceNumber', the character length must be smaller than or equal to 48.";
        }

        if (!is_null($this->container['purchaseOrderNumber']) && (mb_strlen($this->container['purchaseOrderNumber']) > 128)) {
            $invalidProperties[] = "invalid value for 'purchaseOrderNumber', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['mcc']) && (mb_strlen($this->container['mcc']) > 4)) {
            $invalidProperties[] = "invalid value for 'mcc', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets referenceNumber
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['referenceNumber'];
    }

    /**
     * Sets referenceNumber
     *
     * @param string|null $referenceNumber For FORCED_TICKET only. Stores the six digit reference number you have received as the result of a successful external authorization (e.g. by phone). The Gateway needs this number for uniquely mapping a ForcedTicket transaction to a previously performed external authorization.]
     *
     * @return $this
     */
    public function setReferenceNumber($referenceNumber)
    {
        if (!is_null($referenceNumber) && (mb_strlen($referenceNumber) > 8)) {
            throw new \InvalidArgumentException('invalid length for $referenceNumber when calling PrimaryTransactionAdditionalDetails., must be smaller than or equal to 8.');
        }

        $this->container['referenceNumber'] = $referenceNumber;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comments for the payment
     *
     * @return $this
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling PrimaryTransactionAdditionalDetails., must be smaller than or equal to 1024.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets dynamicMerchantName
     *
     * @return string|null
     */
    public function getDynamicMerchantName()
    {
        return $this->container['dynamicMerchantName'];
    }

    /**
     * Sets dynamicMerchantName
     *
     * @param string|null $dynamicMerchantName The name of sub-merchant for the payment facilitator
     *
     * @return $this
     */
    public function setDynamicMerchantName($dynamicMerchantName)
    {
        if (!is_null($dynamicMerchantName) && (mb_strlen($dynamicMerchantName) > 100)) {
            throw new \InvalidArgumentException('invalid length for $dynamicMerchantName when calling PrimaryTransactionAdditionalDetails., must be smaller than or equal to 100.');
        }

        $this->container['dynamicMerchantName'] = $dynamicMerchantName;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param string|null $invoiceNumber Invoice number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        if (!is_null($invoiceNumber) && (mb_strlen($invoiceNumber) > 48)) {
            throw new \InvalidArgumentException('invalid length for $invoiceNumber when calling PrimaryTransactionAdditionalDetails., must be smaller than or equal to 48.');
        }

        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets purchaseOrderNumber
     *
     * @return string|null
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchaseOrderNumber'];
    }

    /**
     * Sets purchaseOrderNumber
     *
     * @param string|null $purchaseOrderNumber Purchase order number
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchaseOrderNumber)
    {
        if (!is_null($purchaseOrderNumber) && (mb_strlen($purchaseOrderNumber) > 128)) {
            throw new \InvalidArgumentException('invalid length for $purchaseOrderNumber when calling PrimaryTransactionAdditionalDetails., must be smaller than or equal to 128.');
        }

        $this->container['purchaseOrderNumber'] = $purchaseOrderNumber;

        return $this;
    }

    /**
     * Gets recurringType
     *
     * @return string|null
     */
    public function getRecurringType()
    {
        return $this->container['recurringType'];
    }

    /**
     * Sets recurringType
     *
     * @param string|null $recurringType Valid values are 'FIRST', 'REPEAT' and 'STANDING_INSTRUCTION'.
     *
     * @return $this
     */
    public function setRecurringType($recurringType)
    {
        $this->container['recurringType'] = $recurringType;

        return $this;
    }

    /**
     * Gets installmentOptions
     *
     * @return \FirstData\FirstApi\Client\Model\InstallmentOptions|null
     */
    public function getInstallmentOptions()
    {
        return $this->container['installmentOptions'];
    }

    /**
     * Sets installmentOptions
     *
     * @param \FirstData\FirstApi\Client\Model\InstallmentOptions|null $installmentOptions installmentOptions
     *
     * @return $this
     */
    public function setInstallmentOptions($installmentOptions)
    {
        $this->container['installmentOptions'] = $installmentOptions;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string|null $mcc Use this field to override merchant configured MCC value
     *
     * @return $this
     */
    public function setMcc($mcc)
    {
        if (!is_null($mcc) && (mb_strlen($mcc) > 4)) {
            throw new \InvalidArgumentException('invalid length for $mcc when calling PrimaryTransactionAdditionalDetails., must be smaller than or equal to 4.');
        }

        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets dcc
     *
     * @return \FirstData\FirstApi\Client\Model\Dcc|null
     */
    public function getDcc()
    {
        return $this->container['dcc'];
    }

    /**
     * Sets dcc
     *
     * @param \FirstData\FirstApi\Client\Model\Dcc|null $dcc dcc
     *
     * @return $this
     */
    public function setDcc($dcc)
    {
        $this->container['dcc'] = $dcc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


