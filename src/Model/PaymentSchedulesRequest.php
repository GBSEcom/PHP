<?php
/**
 * PaymentSchedulesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Gateway API Specification
 *
 * Payment Gateway API for payment processing.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * PaymentSchedulesRequest Class Doc Comment
 *
 * @category Class
 * @description Request to create a gateway scheduler.
 * @package  FirstData\FirstApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentSchedulesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentSchedulesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'storeId' => 'string',
        'referenceOrderId' => 'string',
        'startDate' => '\DateTime',
        'numberOfPayments' => 'int',
        'maximumFailures' => 'int',
        'invoiceNumber' => 'string',
        'poNumber' => 'string',
        'transactionOrigin' => 'string',
        'dynamicMerchantName' => 'string',
        'frequency' => '\FirstData\FirstApi\Client\Model\Frequency',
        'paymentMethod' => '\FirstData\FirstApi\Client\Model\PaymentMethod',
        'amount' => '\FirstData\FirstApi\Client\Model\Amount',
        'clientLocale' => '\FirstData\FirstApi\Client\Model\ClientLocale',
        'orderId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'storeId' => null,
        'referenceOrderId' => null,
        'startDate' => 'date',
        'numberOfPayments' => 'int32',
        'maximumFailures' => 'int32',
        'invoiceNumber' => null,
        'poNumber' => null,
        'transactionOrigin' => null,
        'dynamicMerchantName' => null,
        'frequency' => null,
        'paymentMethod' => null,
        'amount' => null,
        'clientLocale' => null,
        'orderId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storeId' => 'storeId',
        'referenceOrderId' => 'referenceOrderId',
        'startDate' => 'startDate',
        'numberOfPayments' => 'numberOfPayments',
        'maximumFailures' => 'maximumFailures',
        'invoiceNumber' => 'invoiceNumber',
        'poNumber' => 'poNumber',
        'transactionOrigin' => 'transactionOrigin',
        'dynamicMerchantName' => 'dynamicMerchantName',
        'frequency' => 'frequency',
        'paymentMethod' => 'paymentMethod',
        'amount' => 'amount',
        'clientLocale' => 'clientLocale',
        'orderId' => 'orderId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storeId' => 'setStoreId',
        'referenceOrderId' => 'setReferenceOrderId',
        'startDate' => 'setStartDate',
        'numberOfPayments' => 'setNumberOfPayments',
        'maximumFailures' => 'setMaximumFailures',
        'invoiceNumber' => 'setInvoiceNumber',
        'poNumber' => 'setPoNumber',
        'transactionOrigin' => 'setTransactionOrigin',
        'dynamicMerchantName' => 'setDynamicMerchantName',
        'frequency' => 'setFrequency',
        'paymentMethod' => 'setPaymentMethod',
        'amount' => 'setAmount',
        'clientLocale' => 'setClientLocale',
        'orderId' => 'setOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storeId' => 'getStoreId',
        'referenceOrderId' => 'getReferenceOrderId',
        'startDate' => 'getStartDate',
        'numberOfPayments' => 'getNumberOfPayments',
        'maximumFailures' => 'getMaximumFailures',
        'invoiceNumber' => 'getInvoiceNumber',
        'poNumber' => 'getPoNumber',
        'transactionOrigin' => 'getTransactionOrigin',
        'dynamicMerchantName' => 'getDynamicMerchantName',
        'frequency' => 'getFrequency',
        'paymentMethod' => 'getPaymentMethod',
        'amount' => 'getAmount',
        'clientLocale' => 'getClientLocale',
        'orderId' => 'getOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSACTION_ORIGIN_ECI = 'ECI';
    const TRANSACTION_ORIGIN_MOTO = 'MOTO';
    const TRANSACTION_ORIGIN_RETAIL = 'RETAIL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionOriginAllowableValues()
    {
        return [
            self::TRANSACTION_ORIGIN_ECI,
            self::TRANSACTION_ORIGIN_MOTO,
            self::TRANSACTION_ORIGIN_RETAIL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['storeId'] = isset($data['storeId']) ? $data['storeId'] : null;
        $this->container['referenceOrderId'] = isset($data['referenceOrderId']) ? $data['referenceOrderId'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['numberOfPayments'] = isset($data['numberOfPayments']) ? $data['numberOfPayments'] : null;
        $this->container['maximumFailures'] = isset($data['maximumFailures']) ? $data['maximumFailures'] : null;
        $this->container['invoiceNumber'] = isset($data['invoiceNumber']) ? $data['invoiceNumber'] : null;
        $this->container['poNumber'] = isset($data['poNumber']) ? $data['poNumber'] : null;
        $this->container['transactionOrigin'] = isset($data['transactionOrigin']) ? $data['transactionOrigin'] : null;
        $this->container['dynamicMerchantName'] = isset($data['dynamicMerchantName']) ? $data['dynamicMerchantName'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['paymentMethod'] = isset($data['paymentMethod']) ? $data['paymentMethod'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['clientLocale'] = isset($data['clientLocale']) ? $data['clientLocale'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['numberOfPayments']) && ($this->container['numberOfPayments'] > 999)) {
            $invalidProperties[] = "invalid value for 'numberOfPayments', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['numberOfPayments']) && ($this->container['numberOfPayments'] < 1)) {
            $invalidProperties[] = "invalid value for 'numberOfPayments', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['maximumFailures']) && ($this->container['maximumFailures'] > 999)) {
            $invalidProperties[] = "invalid value for 'maximumFailures', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['maximumFailures']) && ($this->container['maximumFailures'] < 1)) {
            $invalidProperties[] = "invalid value for 'maximumFailures', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTransactionOriginAllowableValues();
        if (!in_array($this->container['transactionOrigin'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transactionOrigin', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['numberOfPayments'] > 999) {
            return false;
        }
        if ($this->container['numberOfPayments'] < 1) {
            return false;
        }
        if ($this->container['maximumFailures'] > 999) {
            return false;
        }
        if ($this->container['maximumFailures'] < 1) {
            return false;
        }
        $allowedValues = $this->getTransactionOriginAllowableValues();
        if (!in_array($this->container['transactionOrigin'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets storeId
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     *
     * @param string $storeId Store ID number.
     *
     * @return $this
     */
    public function setStoreId($storeId)
    {
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets referenceOrderId
     *
     * @return string
     */
    public function getReferenceOrderId()
    {
        return $this->container['referenceOrderId'];
    }

    /**
     * Sets referenceOrderId
     *
     * @param string $referenceOrderId Order ID used to create recurring payment from existing transaction.
     *
     * @return $this
     */
    public function setReferenceOrderId($referenceOrderId)
    {
        $this->container['referenceOrderId'] = $referenceOrderId;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate Date of mandate signature.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets numberOfPayments
     *
     * @return int
     */
    public function getNumberOfPayments()
    {
        return $this->container['numberOfPayments'];
    }

    /**
     * Sets numberOfPayments
     *
     * @param int $numberOfPayments Number of times the recurring payment will process.
     *
     * @return $this
     */
    public function setNumberOfPayments($numberOfPayments)
    {

        if (!is_null($numberOfPayments) && ($numberOfPayments > 999)) {
            throw new \InvalidArgumentException('invalid value for $numberOfPayments when calling PaymentSchedulesRequest., must be smaller than or equal to 999.');
        }
        if (!is_null($numberOfPayments) && ($numberOfPayments < 1)) {
            throw new \InvalidArgumentException('invalid value for $numberOfPayments when calling PaymentSchedulesRequest., must be bigger than or equal to 1.');
        }

        $this->container['numberOfPayments'] = $numberOfPayments;

        return $this;
    }

    /**
     * Gets maximumFailures
     *
     * @return int
     */
    public function getMaximumFailures()
    {
        return $this->container['maximumFailures'];
    }

    /**
     * Sets maximumFailures
     *
     * @param int $maximumFailures Number of failures that can be encountered before re-tries cease.
     *
     * @return $this
     */
    public function setMaximumFailures($maximumFailures)
    {

        if (!is_null($maximumFailures) && ($maximumFailures > 999)) {
            throw new \InvalidArgumentException('invalid value for $maximumFailures when calling PaymentSchedulesRequest., must be smaller than or equal to 999.');
        }
        if (!is_null($maximumFailures) && ($maximumFailures < 1)) {
            throw new \InvalidArgumentException('invalid value for $maximumFailures when calling PaymentSchedulesRequest., must be bigger than or equal to 1.');
        }

        $this->container['maximumFailures'] = $maximumFailures;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param string $invoiceNumber Invoice number.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets poNumber
     *
     * @return string
     */
    public function getPoNumber()
    {
        return $this->container['poNumber'];
    }

    /**
     * Sets poNumber
     *
     * @param string $poNumber Purchase order number.
     *
     * @return $this
     */
    public function setPoNumber($poNumber)
    {
        $this->container['poNumber'] = $poNumber;

        return $this;
    }

    /**
     * Gets transactionOrigin
     *
     * @return string
     */
    public function getTransactionOrigin()
    {
        return $this->container['transactionOrigin'];
    }

    /**
     * Sets transactionOrigin
     *
     * @param string $transactionOrigin The source of the transaction. The possible values are ECI (if the order was received via email or Internet), MOTO (mail order / telephone order) and RETAIL (face to face).
     *
     * @return $this
     */
    public function setTransactionOrigin($transactionOrigin)
    {
        $allowedValues = $this->getTransactionOriginAllowableValues();
        if (!is_null($transactionOrigin) && !in_array($transactionOrigin, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transactionOrigin', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transactionOrigin'] = $transactionOrigin;

        return $this;
    }

    /**
     * Gets dynamicMerchantName
     *
     * @return string
     */
    public function getDynamicMerchantName()
    {
        return $this->container['dynamicMerchantName'];
    }

    /**
     * Sets dynamicMerchantName
     *
     * @param string $dynamicMerchantName Dynamic merchant name for the cardholder‘s statement.
     *
     * @return $this
     */
    public function setDynamicMerchantName($dynamicMerchantName)
    {
        $this->container['dynamicMerchantName'] = $dynamicMerchantName;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return \FirstData\FirstApi\Client\Model\Frequency
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param \FirstData\FirstApi\Client\Model\Frequency $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \FirstData\FirstApi\Client\Model\PaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \FirstData\FirstApi\Client\Model\PaymentMethod $paymentMethod paymentMethod
     *
     * @return $this
     */
    public function setPaymentMethod($paymentMethod)
    {
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \FirstData\FirstApi\Client\Model\Amount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \FirstData\FirstApi\Client\Model\Amount $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets clientLocale
     *
     * @return \FirstData\FirstApi\Client\Model\ClientLocale
     */
    public function getClientLocale()
    {
        return $this->container['clientLocale'];
    }

    /**
     * Sets clientLocale
     *
     * @param \FirstData\FirstApi\Client\Model\ClientLocale $clientLocale clientLocale
     *
     * @return $this
     */
    public function setClientLocale($clientLocale)
    {
        $this->container['clientLocale'] = $clientLocale;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId Client Order ID if supplied by client.
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


