<?php
/**
 * Secure3dAuthenticationResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * OpenAPI spec version: 6.6.0.20190329.001
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * Secure3dAuthenticationResult Class Doc Comment
 *
 * @category Class
 * @description Submit the result of the authentication managed outside of the gateway. For more convenient usage without implementing 3-D Secure yourself see \&quot;authenticationRequest\&quot; section.
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Secure3dAuthenticationResult extends Authentication 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Secure3dAuthenticationResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'verificationResponse' => 'string',
        'authenticationAttemptResult' => 'string',
        'authenticationValue' => 'string',
        'xid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'verificationResponse' => null,
        'authenticationAttemptResult' => null,
        'authenticationValue' => null,
        'xid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verificationResponse' => 'verificationResponse',
        'authenticationAttemptResult' => 'authenticationAttemptResult',
        'authenticationValue' => 'authenticationValue',
        'xid' => 'xid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verificationResponse' => 'setVerificationResponse',
        'authenticationAttemptResult' => 'setAuthenticationAttemptResult',
        'authenticationValue' => 'setAuthenticationValue',
        'xid' => 'setXid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verificationResponse' => 'getVerificationResponse',
        'authenticationAttemptResult' => 'getAuthenticationAttemptResult',
        'authenticationValue' => 'getAuthenticationValue',
        'xid' => 'getXid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VERIFICATION_RESPONSE_Y = 'Y';
    const VERIFICATION_RESPONSE_N = 'N';
    const VERIFICATION_RESPONSE_U = 'U';
    const AUTHENTICATION_ATTEMPT_RESULT_Y = 'Y';
    const AUTHENTICATION_ATTEMPT_RESULT_N = 'N';
    const AUTHENTICATION_ATTEMPT_RESULT_U = 'U';
    const AUTHENTICATION_ATTEMPT_RESULT_A = 'A';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerificationResponseAllowableValues()
    {
        return [
            self::VERIFICATION_RESPONSE_Y,
            self::VERIFICATION_RESPONSE_N,
            self::VERIFICATION_RESPONSE_U,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationAttemptResultAllowableValues()
    {
        return [
            self::AUTHENTICATION_ATTEMPT_RESULT_Y,
            self::AUTHENTICATION_ATTEMPT_RESULT_N,
            self::AUTHENTICATION_ATTEMPT_RESULT_U,
            self::AUTHENTICATION_ATTEMPT_RESULT_A,
        ];
    }
    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['verificationResponse'] = isset($data['verificationResponse']) ? $data['verificationResponse'] : null;
        $this->container['authenticationAttemptResult'] = isset($data['authenticationAttemptResult']) ? $data['authenticationAttemptResult'] : null;
        $this->container['authenticationValue'] = isset($data['authenticationValue']) ? $data['authenticationValue'] : null;
        $this->container['xid'] = isset($data['xid']) ? $data['xid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getVerificationResponseAllowableValues();
        if (!is_null($this->container['verificationResponse']) && !in_array($this->container['verificationResponse'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verificationResponse', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthenticationAttemptResultAllowableValues();
        if (!is_null($this->container['authenticationAttemptResult']) && !in_array($this->container['authenticationAttemptResult'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authenticationAttemptResult', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['authenticationValue']) && (mb_strlen($this->container['authenticationValue']) > 32)) {
            $invalidProperties[] = "invalid value for 'authenticationValue', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['authenticationValue']) && (mb_strlen($this->container['authenticationValue']) < 20)) {
            $invalidProperties[] = "invalid value for 'authenticationValue', the character length must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['xid']) && (mb_strlen($this->container['xid']) > 32)) {
            $invalidProperties[] = "invalid value for 'xid', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['xid']) && (mb_strlen($this->container['xid']) < 20)) {
            $invalidProperties[] = "invalid value for 'xid', the character length must be bigger than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets verificationResponse
     *
     * @return string|null
     */
    public function getVerificationResponse()
    {
        return $this->container['verificationResponse'];
    }

    /**
     * Sets verificationResponse
     *
     * @param string|null $verificationResponse Card enrollment result from the Verification Response (VeRes).
     *
     * @return $this
     */
    public function setVerificationResponse($verificationResponse)
    {
        $allowedValues = $this->getVerificationResponseAllowableValues();
        if (!is_null($verificationResponse) && !in_array($verificationResponse, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verificationResponse', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verificationResponse'] = $verificationResponse;

        return $this;
    }

    /**
     * Gets authenticationAttemptResult
     *
     * @return string|null
     */
    public function getAuthenticationAttemptResult()
    {
        return $this->container['authenticationAttemptResult'];
    }

    /**
     * Sets authenticationAttemptResult
     *
     * @param string|null $authenticationAttemptResult Result of authentication attempt from Payer Authentication Response (PaRes).
     *
     * @return $this
     */
    public function setAuthenticationAttemptResult($authenticationAttemptResult)
    {
        $allowedValues = $this->getAuthenticationAttemptResultAllowableValues();
        if (!is_null($authenticationAttemptResult) && !in_array($authenticationAttemptResult, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authenticationAttemptResult', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authenticationAttemptResult'] = $authenticationAttemptResult;

        return $this;
    }

    /**
     * Gets authenticationValue
     *
     * @return string|null
     */
    public function getAuthenticationValue()
    {
        return $this->container['authenticationValue'];
    }

    /**
     * Sets authenticationValue
     *
     * @param string|null $authenticationValue The Cardholder Authentication Verification Value (CAVV) is a cryptographic value derived by the issuer during payment authentication that can provide evidence of the results of payment authentication during an online purchase.
     *
     * @return $this
     */
    public function setAuthenticationValue($authenticationValue)
    {
        if (!is_null($authenticationValue) && (mb_strlen($authenticationValue) > 32)) {
            throw new \InvalidArgumentException('invalid length for $authenticationValue when calling Secure3dAuthenticationResult., must be smaller than or equal to 32.');
        }
        if (!is_null($authenticationValue) && (mb_strlen($authenticationValue) < 20)) {
            throw new \InvalidArgumentException('invalid length for $authenticationValue when calling Secure3dAuthenticationResult., must be bigger than or equal to 20.');
        }

        $this->container['authenticationValue'] = $authenticationValue;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string|null
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string|null $xid The transaction identifier (XID) is a unique tracking number set by the merchant.
     *
     * @return $this
     */
    public function setXid($xid)
    {
        if (!is_null($xid) && (mb_strlen($xid) > 32)) {
            throw new \InvalidArgumentException('invalid length for $xid when calling Secure3dAuthenticationResult., must be smaller than or equal to 32.');
        }
        if (!is_null($xid) && (mb_strlen($xid) < 20)) {
            throw new \InvalidArgumentException('invalid length for $xid when calling Secure3dAuthenticationResult., must be bigger than or equal to 20.');
        }

        $this->container['xid'] = $xid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


