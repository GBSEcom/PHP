<?php
/**
 * PaymentCardAuthenticationResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Gateway API Specification
 *
 * Payment Gateway API for payment processing.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * PaymentCardAuthenticationResult Class Doc Comment
 *
 * @category Class
 * @description Submit the result of the authentication managed outside of The Gateway. For more convenient usage without implementing 3-D Secure yourself see \&quot;authenticationRequest\&quot; section
 * @package  FirstData\FirstApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentCardAuthenticationResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentCard_authenticationResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'verificationResponse' => 'string',
        'payerAuthenticationResponse' => 'string',
        'authenticationValue' => 'string',
        'xid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'verificationResponse' => null,
        'payerAuthenticationResponse' => null,
        'authenticationValue' => null,
        'xid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'verificationResponse' => 'verificationResponse',
        'payerAuthenticationResponse' => 'payerAuthenticationResponse',
        'authenticationValue' => 'authenticationValue',
        'xid' => 'xid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'verificationResponse' => 'setVerificationResponse',
        'payerAuthenticationResponse' => 'setPayerAuthenticationResponse',
        'authenticationValue' => 'setAuthenticationValue',
        'xid' => 'setXid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'verificationResponse' => 'getVerificationResponse',
        'payerAuthenticationResponse' => 'getPayerAuthenticationResponse',
        'authenticationValue' => 'getAuthenticationValue',
        'xid' => 'getXid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE__3_D = 'SECURE_3D';
    const VERIFICATION_RESPONSE_Y = 'Y';
    const VERIFICATION_RESPONSE_N = 'N';
    const VERIFICATION_RESPONSE_U = 'U';
    const PAYER_AUTHENTICATION_RESPONSE_Y = 'Y';
    const PAYER_AUTHENTICATION_RESPONSE_N = 'N';
    const PAYER_AUTHENTICATION_RESPONSE_U = 'U';
    const PAYER_AUTHENTICATION_RESPONSE_A = 'A';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__3_D,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerificationResponseAllowableValues()
    {
        return [
            self::VERIFICATION_RESPONSE_Y,
            self::VERIFICATION_RESPONSE_N,
            self::VERIFICATION_RESPONSE_U,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayerAuthenticationResponseAllowableValues()
    {
        return [
            self::PAYER_AUTHENTICATION_RESPONSE_Y,
            self::PAYER_AUTHENTICATION_RESPONSE_N,
            self::PAYER_AUTHENTICATION_RESPONSE_U,
            self::PAYER_AUTHENTICATION_RESPONSE_A,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['verificationResponse'] = isset($data['verificationResponse']) ? $data['verificationResponse'] : null;
        $this->container['payerAuthenticationResponse'] = isset($data['payerAuthenticationResponse']) ? $data['payerAuthenticationResponse'] : null;
        $this->container['authenticationValue'] = isset($data['authenticationValue']) ? $data['authenticationValue'] : null;
        $this->container['xid'] = isset($data['xid']) ? $data['xid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVerificationResponseAllowableValues();
        if (!in_array($this->container['verificationResponse'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verificationResponse', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayerAuthenticationResponseAllowableValues();
        if (!in_array($this->container['payerAuthenticationResponse'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payerAuthenticationResponse', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['authenticationValue']) && (strlen($this->container['authenticationValue']) > 32)) {
            $invalidProperties[] = "invalid value for 'authenticationValue', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['authenticationValue']) && (strlen($this->container['authenticationValue']) < 20)) {
            $invalidProperties[] = "invalid value for 'authenticationValue', the character length must be bigger than or equal to 20.";
        }

        if (!is_null($this->container['xid']) && (strlen($this->container['xid']) > 32)) {
            $invalidProperties[] = "invalid value for 'xid', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['xid']) && (strlen($this->container['xid']) < 20)) {
            $invalidProperties[] = "invalid value for 'xid', the character length must be bigger than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getVerificationResponseAllowableValues();
        if (!in_array($this->container['verificationResponse'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPayerAuthenticationResponseAllowableValues();
        if (!in_array($this->container['payerAuthenticationResponse'], $allowedValues)) {
            return false;
        }
        if (strlen($this->container['authenticationValue']) > 32) {
            return false;
        }
        if (strlen($this->container['authenticationValue']) < 20) {
            return false;
        }
        if (strlen($this->container['xid']) > 32) {
            return false;
        }
        if (strlen($this->container['xid']) < 20) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of authentication result. For example, 3-D Secure.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets verificationResponse
     *
     * @return string
     */
    public function getVerificationResponse()
    {
        return $this->container['verificationResponse'];
    }

    /**
     * Sets verificationResponse
     *
     * @param string $verificationResponse Card enrollment result from the Verification Response (VeRes)
     *
     * @return $this
     */
    public function setVerificationResponse($verificationResponse)
    {
        $allowedValues = $this->getVerificationResponseAllowableValues();
        if (!is_null($verificationResponse) && !in_array($verificationResponse, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verificationResponse', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verificationResponse'] = $verificationResponse;

        return $this;
    }

    /**
     * Gets payerAuthenticationResponse
     *
     * @return string
     */
    public function getPayerAuthenticationResponse()
    {
        return $this->container['payerAuthenticationResponse'];
    }

    /**
     * Sets payerAuthenticationResponse
     *
     * @param string $payerAuthenticationResponse Payer authentication result from Payment Authentication Response (PaRes)
     *
     * @return $this
     */
    public function setPayerAuthenticationResponse($payerAuthenticationResponse)
    {
        $allowedValues = $this->getPayerAuthenticationResponseAllowableValues();
        if (!is_null($payerAuthenticationResponse) && !in_array($payerAuthenticationResponse, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payerAuthenticationResponse', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payerAuthenticationResponse'] = $payerAuthenticationResponse;

        return $this;
    }

    /**
     * Gets authenticationValue
     *
     * @return string
     */
    public function getAuthenticationValue()
    {
        return $this->container['authenticationValue'];
    }

    /**
     * Sets authenticationValue
     *
     * @param string $authenticationValue Cardholder Authentication Verification Value (CAVV)
     *
     * @return $this
     */
    public function setAuthenticationValue($authenticationValue)
    {
        if (!is_null($authenticationValue) && (strlen($authenticationValue) > 32)) {
            throw new \InvalidArgumentException('invalid length for $authenticationValue when calling PaymentCardAuthenticationResult., must be smaller than or equal to 32.');
        }
        if (!is_null($authenticationValue) && (strlen($authenticationValue) < 20)) {
            throw new \InvalidArgumentException('invalid length for $authenticationValue when calling PaymentCardAuthenticationResult., must be bigger than or equal to 20.');
        }

        $this->container['authenticationValue'] = $authenticationValue;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string $xid Authentication ID
     *
     * @return $this
     */
    public function setXid($xid)
    {
        if (!is_null($xid) && (strlen($xid) > 32)) {
            throw new \InvalidArgumentException('invalid length for $xid when calling PaymentCardAuthenticationResult., must be smaller than or equal to 32.');
        }
        if (!is_null($xid) && (strlen($xid) < 20)) {
            throw new \InvalidArgumentException('invalid length for $xid when calling PaymentCardAuthenticationResult., must be bigger than or equal to 20.');
        }

        $this->container['xid'] = $xid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


