<?php
/**
 * PrimaryTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * PrimaryTransaction Class Doc Comment
 *
 * @category Class
 * @description Model for primary financial transactions
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PrimaryTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrimaryTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transactionType' => '\FirstData\FirstApi\Client\Model\TransactionType',
        'storeId' => 'string',
        'merchantTransactionId' => 'string',
        'transactionOrigin' => '\FirstData\FirstApi\Client\Model\TransactionOrigin',
        'amount' => '\FirstData\FirstApi\Client\Model\Amount',
        'paymentMethod' => '\FirstData\FirstApi\Client\Model\PaymentMethod',
        'order' => '\FirstData\FirstApi\Client\Model\Order',
        'basketItems' => '\FirstData\FirstApi\Client\Model\BasketItem[]',
        'splitShipment' => '\FirstData\FirstApi\Client\Model\SplitShipment',
        'additionalDetails' => '\FirstData\FirstApi\Client\Model\PrimaryTransactionAdditionalDetails',
        'industrySpecificExtensions' => '\FirstData\FirstApi\Client\Model\IndustrySpecificExtensions',
        'storedCredentials' => '\FirstData\FirstApi\Client\Model\StoredCredential',
        'purchaseCard' => '\FirstData\FirstApi\Client\Model\PurchaseCards',
        'paymentFacilitator' => '\FirstData\FirstApi\Client\Model\PaymentFacilitator',
        'softDescriptor' => '\FirstData\FirstApi\Client\Model\SoftDescriptor'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'transactionType' => null,
        'storeId' => null,
        'merchantTransactionId' => null,
        'transactionOrigin' => null,
        'amount' => null,
        'paymentMethod' => null,
        'order' => null,
        'basketItems' => null,
        'splitShipment' => null,
        'additionalDetails' => null,
        'industrySpecificExtensions' => null,
        'storedCredentials' => null,
        'purchaseCard' => null,
        'paymentFacilitator' => null,
        'softDescriptor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transactionType' => 'transactionType',
        'storeId' => 'storeId',
        'merchantTransactionId' => 'merchantTransactionId',
        'transactionOrigin' => 'transactionOrigin',
        'amount' => 'amount',
        'paymentMethod' => 'paymentMethod',
        'order' => 'order',
        'basketItems' => 'basketItems',
        'splitShipment' => 'splitShipment',
        'additionalDetails' => 'additionalDetails',
        'industrySpecificExtensions' => 'industrySpecificExtensions',
        'storedCredentials' => 'storedCredentials',
        'purchaseCard' => 'purchaseCard',
        'paymentFacilitator' => 'paymentFacilitator',
        'softDescriptor' => 'softDescriptor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transactionType' => 'setTransactionType',
        'storeId' => 'setStoreId',
        'merchantTransactionId' => 'setMerchantTransactionId',
        'transactionOrigin' => 'setTransactionOrigin',
        'amount' => 'setAmount',
        'paymentMethod' => 'setPaymentMethod',
        'order' => 'setOrder',
        'basketItems' => 'setBasketItems',
        'splitShipment' => 'setSplitShipment',
        'additionalDetails' => 'setAdditionalDetails',
        'industrySpecificExtensions' => 'setIndustrySpecificExtensions',
        'storedCredentials' => 'setStoredCredentials',
        'purchaseCard' => 'setPurchaseCard',
        'paymentFacilitator' => 'setPaymentFacilitator',
        'softDescriptor' => 'setSoftDescriptor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transactionType' => 'getTransactionType',
        'storeId' => 'getStoreId',
        'merchantTransactionId' => 'getMerchantTransactionId',
        'transactionOrigin' => 'getTransactionOrigin',
        'amount' => 'getAmount',
        'paymentMethod' => 'getPaymentMethod',
        'order' => 'getOrder',
        'basketItems' => 'getBasketItems',
        'splitShipment' => 'getSplitShipment',
        'additionalDetails' => 'getAdditionalDetails',
        'industrySpecificExtensions' => 'getIndustrySpecificExtensions',
        'storedCredentials' => 'getStoredCredentials',
        'purchaseCard' => 'getPurchaseCard',
        'paymentFacilitator' => 'getPaymentFacilitator',
        'softDescriptor' => 'getSoftDescriptor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transactionType'] = isset($data['transactionType']) ? $data['transactionType'] : null;
        $this->container['storeId'] = isset($data['storeId']) ? $data['storeId'] : null;
        $this->container['merchantTransactionId'] = isset($data['merchantTransactionId']) ? $data['merchantTransactionId'] : null;
        $this->container['transactionOrigin'] = isset($data['transactionOrigin']) ? $data['transactionOrigin'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['paymentMethod'] = isset($data['paymentMethod']) ? $data['paymentMethod'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['basketItems'] = isset($data['basketItems']) ? $data['basketItems'] : null;
        $this->container['splitShipment'] = isset($data['splitShipment']) ? $data['splitShipment'] : null;
        $this->container['additionalDetails'] = isset($data['additionalDetails']) ? $data['additionalDetails'] : null;
        $this->container['industrySpecificExtensions'] = isset($data['industrySpecificExtensions']) ? $data['industrySpecificExtensions'] : null;
        $this->container['storedCredentials'] = isset($data['storedCredentials']) ? $data['storedCredentials'] : null;
        $this->container['purchaseCard'] = isset($data['purchaseCard']) ? $data['purchaseCard'] : null;
        $this->container['paymentFacilitator'] = isset($data['paymentFacilitator']) ? $data['paymentFacilitator'] : null;
        $this->container['softDescriptor'] = isset($data['softDescriptor']) ? $data['softDescriptor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transactionType'] === null) {
            $invalidProperties[] = "'transactionType' can't be null";
        }
        if (!is_null($this->container['storeId']) && (mb_strlen($this->container['storeId']) > 20)) {
            $invalidProperties[] = "invalid value for 'storeId', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['merchantTransactionId']) && (mb_strlen($this->container['merchantTransactionId']) > 40)) {
            $invalidProperties[] = "invalid value for 'merchantTransactionId', the character length must be smaller than or equal to 40.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['paymentMethod'] === null) {
            $invalidProperties[] = "'paymentMethod' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transactionType
     *
     * @return \FirstData\FirstApi\Client\Model\TransactionType
     */
    public function getTransactionType()
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param \FirstData\FirstApi\Client\Model\TransactionType $transactionType transactionType
     *
     * @return $this
     */
    public function setTransactionType($transactionType)
    {
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets storeId
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     *
     * @param string|null $storeId An optional outlet ID for clients that support multiple stores in the same app.
     *
     * @return $this
     */
    public function setStoreId($storeId)
    {
        if (!is_null($storeId) && (mb_strlen($storeId) > 20)) {
            throw new \InvalidArgumentException('invalid length for $storeId when calling PrimaryTransaction., must be smaller than or equal to 20.');
        }

        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets merchantTransactionId
     *
     * @return string|null
     */
    public function getMerchantTransactionId()
    {
        return $this->container['merchantTransactionId'];
    }

    /**
     * Sets merchantTransactionId
     *
     * @param string|null $merchantTransactionId The unique merchant transaction ID from the Request header, if supplied.
     *
     * @return $this
     */
    public function setMerchantTransactionId($merchantTransactionId)
    {
        if (!is_null($merchantTransactionId) && (mb_strlen($merchantTransactionId) > 40)) {
            throw new \InvalidArgumentException('invalid length for $merchantTransactionId when calling PrimaryTransaction., must be smaller than or equal to 40.');
        }

        $this->container['merchantTransactionId'] = $merchantTransactionId;

        return $this;
    }

    /**
     * Gets transactionOrigin
     *
     * @return \FirstData\FirstApi\Client\Model\TransactionOrigin|null
     */
    public function getTransactionOrigin()
    {
        return $this->container['transactionOrigin'];
    }

    /**
     * Sets transactionOrigin
     *
     * @param \FirstData\FirstApi\Client\Model\TransactionOrigin|null $transactionOrigin transactionOrigin
     *
     * @return $this
     */
    public function setTransactionOrigin($transactionOrigin)
    {
        $this->container['transactionOrigin'] = $transactionOrigin;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \FirstData\FirstApi\Client\Model\Amount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \FirstData\FirstApi\Client\Model\Amount $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \FirstData\FirstApi\Client\Model\PaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \FirstData\FirstApi\Client\Model\PaymentMethod $paymentMethod paymentMethod
     *
     * @return $this
     */
    public function setPaymentMethod($paymentMethod)
    {
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \FirstData\FirstApi\Client\Model\Order|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \FirstData\FirstApi\Client\Model\Order|null $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets basketItems
     *
     * @return \FirstData\FirstApi\Client\Model\BasketItem[]|null
     */
    public function getBasketItems()
    {
        return $this->container['basketItems'];
    }

    /**
     * Sets basketItems
     *
     * @param \FirstData\FirstApi\Client\Model\BasketItem[]|null $basketItems Required for some payment methods (for example, Klarna)
     *
     * @return $this
     */
    public function setBasketItems($basketItems)
    {
        $this->container['basketItems'] = $basketItems;

        return $this;
    }

    /**
     * Gets splitShipment
     *
     * @return \FirstData\FirstApi\Client\Model\SplitShipment|null
     */
    public function getSplitShipment()
    {
        return $this->container['splitShipment'];
    }

    /**
     * Sets splitShipment
     *
     * @param \FirstData\FirstApi\Client\Model\SplitShipment|null $splitShipment splitShipment
     *
     * @return $this
     */
    public function setSplitShipment($splitShipment)
    {
        $this->container['splitShipment'] = $splitShipment;

        return $this;
    }

    /**
     * Gets additionalDetails
     *
     * @return \FirstData\FirstApi\Client\Model\PrimaryTransactionAdditionalDetails|null
     */
    public function getAdditionalDetails()
    {
        return $this->container['additionalDetails'];
    }

    /**
     * Sets additionalDetails
     *
     * @param \FirstData\FirstApi\Client\Model\PrimaryTransactionAdditionalDetails|null $additionalDetails additionalDetails
     *
     * @return $this
     */
    public function setAdditionalDetails($additionalDetails)
    {
        $this->container['additionalDetails'] = $additionalDetails;

        return $this;
    }

    /**
     * Gets industrySpecificExtensions
     *
     * @return \FirstData\FirstApi\Client\Model\IndustrySpecificExtensions|null
     */
    public function getIndustrySpecificExtensions()
    {
        return $this->container['industrySpecificExtensions'];
    }

    /**
     * Sets industrySpecificExtensions
     *
     * @param \FirstData\FirstApi\Client\Model\IndustrySpecificExtensions|null $industrySpecificExtensions industrySpecificExtensions
     *
     * @return $this
     */
    public function setIndustrySpecificExtensions($industrySpecificExtensions)
    {
        $this->container['industrySpecificExtensions'] = $industrySpecificExtensions;

        return $this;
    }

    /**
     * Gets storedCredentials
     *
     * @return \FirstData\FirstApi\Client\Model\StoredCredential|null
     */
    public function getStoredCredentials()
    {
        return $this->container['storedCredentials'];
    }

    /**
     * Sets storedCredentials
     *
     * @param \FirstData\FirstApi\Client\Model\StoredCredential|null $storedCredentials storedCredentials
     *
     * @return $this
     */
    public function setStoredCredentials($storedCredentials)
    {
        $this->container['storedCredentials'] = $storedCredentials;

        return $this;
    }

    /**
     * Gets purchaseCard
     *
     * @return \FirstData\FirstApi\Client\Model\PurchaseCards|null
     */
    public function getPurchaseCard()
    {
        return $this->container['purchaseCard'];
    }

    /**
     * Sets purchaseCard
     *
     * @param \FirstData\FirstApi\Client\Model\PurchaseCards|null $purchaseCard purchaseCard
     *
     * @return $this
     */
    public function setPurchaseCard($purchaseCard)
    {
        $this->container['purchaseCard'] = $purchaseCard;

        return $this;
    }

    /**
     * Gets paymentFacilitator
     *
     * @return \FirstData\FirstApi\Client\Model\PaymentFacilitator|null
     */
    public function getPaymentFacilitator()
    {
        return $this->container['paymentFacilitator'];
    }

    /**
     * Sets paymentFacilitator
     *
     * @param \FirstData\FirstApi\Client\Model\PaymentFacilitator|null $paymentFacilitator paymentFacilitator
     *
     * @return $this
     */
    public function setPaymentFacilitator($paymentFacilitator)
    {
        $this->container['paymentFacilitator'] = $paymentFacilitator;

        return $this;
    }

    /**
     * Gets softDescriptor
     *
     * @return \FirstData\FirstApi\Client\Model\SoftDescriptor|null
     */
    public function getSoftDescriptor()
    {
        return $this->container['softDescriptor'];
    }

    /**
     * Sets softDescriptor
     *
     * @param \FirstData\FirstApi\Client\Model\SoftDescriptor|null $softDescriptor softDescriptor
     *
     * @return $this
     */
    public function setSoftDescriptor($softDescriptor)
    {
        $this->container['softDescriptor'] = $softDescriptor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


