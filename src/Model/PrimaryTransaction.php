<?php
/**
 * PrimaryTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Gateway API Specification
 *
 * Payment Gateway API for payment processing.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * PrimaryTransaction Class Doc Comment
 *
 * @category Class
 * @description Model for primary financial transactions
 * @package  FirstData\FirstApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrimaryTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PrimaryTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transactionType' => '\FirstData\FirstApi\Client\Model\TransactionType',
        'storeId' => 'string',
        'clientTransactionId' => 'string',
        'amount' => '\FirstData\FirstApi\Client\Model\Amount',
        'paymentMethod' => '\FirstData\FirstApi\Client\Model\PaymentMethod',
        'order' => '\FirstData\FirstApi\Client\Model\Order',
        'basketItems' => '\FirstData\FirstApi\Client\Model\BasketItem[]',
        'splitShipment' => '\FirstData\FirstApi\Client\Model\SplitShipment',
        'additionalDetails' => '\FirstData\FirstApi\Client\Model\PrimaryTransactionAdditionalDetails',
        'industrySpecificExtensions' => '\FirstData\FirstApi\Client\Model\IndustrySpecificExtensions',
        'storedCredentials' => '\FirstData\FirstApi\Client\Model\StoredCredential'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transactionType' => null,
        'storeId' => null,
        'clientTransactionId' => null,
        'amount' => null,
        'paymentMethod' => null,
        'order' => null,
        'basketItems' => null,
        'splitShipment' => null,
        'additionalDetails' => null,
        'industrySpecificExtensions' => null,
        'storedCredentials' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transactionType' => 'transactionType',
        'storeId' => 'storeId',
        'clientTransactionId' => 'clientTransactionId',
        'amount' => 'amount',
        'paymentMethod' => 'paymentMethod',
        'order' => 'order',
        'basketItems' => 'basketItems',
        'splitShipment' => 'splitShipment',
        'additionalDetails' => 'additionalDetails',
        'industrySpecificExtensions' => 'industrySpecificExtensions',
        'storedCredentials' => 'storedCredentials'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transactionType' => 'setTransactionType',
        'storeId' => 'setStoreId',
        'clientTransactionId' => 'setClientTransactionId',
        'amount' => 'setAmount',
        'paymentMethod' => 'setPaymentMethod',
        'order' => 'setOrder',
        'basketItems' => 'setBasketItems',
        'splitShipment' => 'setSplitShipment',
        'additionalDetails' => 'setAdditionalDetails',
        'industrySpecificExtensions' => 'setIndustrySpecificExtensions',
        'storedCredentials' => 'setStoredCredentials'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transactionType' => 'getTransactionType',
        'storeId' => 'getStoreId',
        'clientTransactionId' => 'getClientTransactionId',
        'amount' => 'getAmount',
        'paymentMethod' => 'getPaymentMethod',
        'order' => 'getOrder',
        'basketItems' => 'getBasketItems',
        'splitShipment' => 'getSplitShipment',
        'additionalDetails' => 'getAdditionalDetails',
        'industrySpecificExtensions' => 'getIndustrySpecificExtensions',
        'storedCredentials' => 'getStoredCredentials'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transactionType'] = isset($data['transactionType']) ? $data['transactionType'] : null;
        $this->container['storeId'] = isset($data['storeId']) ? $data['storeId'] : null;
        $this->container['clientTransactionId'] = isset($data['clientTransactionId']) ? $data['clientTransactionId'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['paymentMethod'] = isset($data['paymentMethod']) ? $data['paymentMethod'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['basketItems'] = isset($data['basketItems']) ? $data['basketItems'] : null;
        $this->container['splitShipment'] = isset($data['splitShipment']) ? $data['splitShipment'] : null;
        $this->container['additionalDetails'] = isset($data['additionalDetails']) ? $data['additionalDetails'] : null;
        $this->container['industrySpecificExtensions'] = isset($data['industrySpecificExtensions']) ? $data['industrySpecificExtensions'] : null;
        $this->container['storedCredentials'] = isset($data['storedCredentials']) ? $data['storedCredentials'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transactionType'] === null) {
            $invalidProperties[] = "'transactionType' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['paymentMethod'] === null) {
            $invalidProperties[] = "'paymentMethod' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['transactionType'] === null) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['paymentMethod'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets transactionType
     *
     * @return \FirstData\FirstApi\Client\Model\TransactionType
     */
    public function getTransactionType()
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param \FirstData\FirstApi\Client\Model\TransactionType $transactionType transactionType
     *
     * @return $this
     */
    public function setTransactionType($transactionType)
    {
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets storeId
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     *
     * @param string $storeId An optional Outlet ID for clients that support multiple stores in the same app.
     *
     * @return $this
     */
    public function setStoreId($storeId)
    {
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets clientTransactionId
     *
     * @return string
     */
    public function getClientTransactionId()
    {
        return $this->container['clientTransactionId'];
    }

    /**
     * Sets clientTransactionId
     *
     * @param string $clientTransactionId The unique client Transaction ID from the Request header, if supplied.
     *
     * @return $this
     */
    public function setClientTransactionId($clientTransactionId)
    {
        $this->container['clientTransactionId'] = $clientTransactionId;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \FirstData\FirstApi\Client\Model\Amount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \FirstData\FirstApi\Client\Model\Amount $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \FirstData\FirstApi\Client\Model\PaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \FirstData\FirstApi\Client\Model\PaymentMethod $paymentMethod paymentMethod
     *
     * @return $this
     */
    public function setPaymentMethod($paymentMethod)
    {
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \FirstData\FirstApi\Client\Model\Order
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \FirstData\FirstApi\Client\Model\Order $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets basketItems
     *
     * @return \FirstData\FirstApi\Client\Model\BasketItem[]
     */
    public function getBasketItems()
    {
        return $this->container['basketItems'];
    }

    /**
     * Sets basketItems
     *
     * @param \FirstData\FirstApi\Client\Model\BasketItem[] $basketItems Required for some payment methods (for example, Klarna)
     *
     * @return $this
     */
    public function setBasketItems($basketItems)
    {
        $this->container['basketItems'] = $basketItems;

        return $this;
    }

    /**
     * Gets splitShipment
     *
     * @return \FirstData\FirstApi\Client\Model\SplitShipment
     */
    public function getSplitShipment()
    {
        return $this->container['splitShipment'];
    }

    /**
     * Sets splitShipment
     *
     * @param \FirstData\FirstApi\Client\Model\SplitShipment $splitShipment splitShipment
     *
     * @return $this
     */
    public function setSplitShipment($splitShipment)
    {
        $this->container['splitShipment'] = $splitShipment;

        return $this;
    }

    /**
     * Gets additionalDetails
     *
     * @return \FirstData\FirstApi\Client\Model\PrimaryTransactionAdditionalDetails
     */
    public function getAdditionalDetails()
    {
        return $this->container['additionalDetails'];
    }

    /**
     * Sets additionalDetails
     *
     * @param \FirstData\FirstApi\Client\Model\PrimaryTransactionAdditionalDetails $additionalDetails additionalDetails
     *
     * @return $this
     */
    public function setAdditionalDetails($additionalDetails)
    {
        $this->container['additionalDetails'] = $additionalDetails;

        return $this;
    }

    /**
     * Gets industrySpecificExtensions
     *
     * @return \FirstData\FirstApi\Client\Model\IndustrySpecificExtensions
     */
    public function getIndustrySpecificExtensions()
    {
        return $this->container['industrySpecificExtensions'];
    }

    /**
     * Sets industrySpecificExtensions
     *
     * @param \FirstData\FirstApi\Client\Model\IndustrySpecificExtensions $industrySpecificExtensions industrySpecificExtensions
     *
     * @return $this
     */
    public function setIndustrySpecificExtensions($industrySpecificExtensions)
    {
        $this->container['industrySpecificExtensions'] = $industrySpecificExtensions;

        return $this;
    }

    /**
     * Gets storedCredentials
     *
     * @return \FirstData\FirstApi\Client\Model\StoredCredential
     */
    public function getStoredCredentials()
    {
        return $this->container['storedCredentials'];
    }

    /**
     * Sets storedCredentials
     *
     * @param \FirstData\FirstApi\Client\Model\StoredCredential $storedCredentials storedCredentials
     *
     * @return $this
     */
    public function setStoredCredentials($storedCredentials)
    {
        $this->container['storedCredentials'] = $storedCredentials;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


