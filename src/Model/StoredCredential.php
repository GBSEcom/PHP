<?php
/**
 * StoredCredential
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Gateway API Specification
 *
 * Payment Gateway API for payment processing.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * StoredCredential Class Doc Comment
 *
 * @category Class
 * @description Object for sending visa store credential
 * @package  FirstData\FirstApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoredCredential implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoredCredential';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sequence' => 'string',
        'scheduled' => 'bool',
        'referencedSchemeTransactionId' => 'string',
        'initiator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sequence' => null,
        'scheduled' => null,
        'referencedSchemeTransactionId' => null,
        'initiator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sequence' => 'sequence',
        'scheduled' => 'scheduled',
        'referencedSchemeTransactionId' => 'referencedSchemeTransactionId',
        'initiator' => 'initiator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sequence' => 'setSequence',
        'scheduled' => 'setScheduled',
        'referencedSchemeTransactionId' => 'setReferencedSchemeTransactionId',
        'initiator' => 'setInitiator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sequence' => 'getSequence',
        'scheduled' => 'getScheduled',
        'referencedSchemeTransactionId' => 'getReferencedSchemeTransactionId',
        'initiator' => 'getInitiator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SEQUENCE_FIRST = 'FIRST';
    const SEQUENCE_SUBSEQUENT = 'SUBSEQUENT';
    const INITIATOR_MERCHANT = 'MERCHANT';
    const INITIATOR_CARDHOLDER = 'CARDHOLDER';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSequenceAllowableValues()
    {
        return [
            self::SEQUENCE_FIRST,
            self::SEQUENCE_SUBSEQUENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInitiatorAllowableValues()
    {
        return [
            self::INITIATOR_MERCHANT,
            self::INITIATOR_CARDHOLDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['scheduled'] = isset($data['scheduled']) ? $data['scheduled'] : null;
        $this->container['referencedSchemeTransactionId'] = isset($data['referencedSchemeTransactionId']) ? $data['referencedSchemeTransactionId'] : null;
        $this->container['initiator'] = isset($data['initiator']) ? $data['initiator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sequence'] === null) {
            $invalidProperties[] = "'sequence' can't be null";
        }
        $allowedValues = $this->getSequenceAllowableValues();
        if (!in_array($this->container['sequence'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sequence', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['scheduled'] === null) {
            $invalidProperties[] = "'scheduled' can't be null";
        }
        if (!is_null($this->container['referencedSchemeTransactionId']) && (strlen($this->container['referencedSchemeTransactionId']) > 40)) {
            $invalidProperties[] = "invalid value for 'referencedSchemeTransactionId', the character length must be smaller than or equal to 40.";
        }

        $allowedValues = $this->getInitiatorAllowableValues();
        if (!in_array($this->container['initiator'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'initiator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['sequence'] === null) {
            return false;
        }
        $allowedValues = $this->getSequenceAllowableValues();
        if (!in_array($this->container['sequence'], $allowedValues)) {
            return false;
        }
        if ($this->container['scheduled'] === null) {
            return false;
        }
        if (strlen($this->container['referencedSchemeTransactionId']) > 40) {
            return false;
        }
        $allowedValues = $this->getInitiatorAllowableValues();
        if (!in_array($this->container['initiator'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets sequence
     *
     * @return string
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param string $sequence Indicates if the transaction is first or subsequent. Valid values are 'FIRST' and 'SUBSEQUENT'
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $allowedValues = $this->getSequenceAllowableValues();
        if (!in_array($sequence, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sequence', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets scheduled
     *
     * @return bool
     */
    public function getScheduled()
    {
        return $this->container['scheduled'];
    }

    /**
     * Sets scheduled
     *
     * @param bool $scheduled Indicates if the transaction is scheduled or part of a installment
     *
     * @return $this
     */
    public function setScheduled($scheduled)
    {
        $this->container['scheduled'] = $scheduled;

        return $this;
    }

    /**
     * Gets referencedSchemeTransactionId
     *
     * @return string
     */
    public function getReferencedSchemeTransactionId()
    {
        return $this->container['referencedSchemeTransactionId'];
    }

    /**
     * Sets referencedSchemeTransactionId
     *
     * @param string $referencedSchemeTransactionId The transaction id received from schemes for the initial transaction. Required if sequence is 'SUBSEQUENT'
     *
     * @return $this
     */
    public function setReferencedSchemeTransactionId($referencedSchemeTransactionId)
    {
        if (!is_null($referencedSchemeTransactionId) && (strlen($referencedSchemeTransactionId) > 40)) {
            throw new \InvalidArgumentException('invalid length for $referencedSchemeTransactionId when calling StoredCredential., must be smaller than or equal to 40.');
        }

        $this->container['referencedSchemeTransactionId'] = $referencedSchemeTransactionId;

        return $this;
    }

    /**
     * Gets initiator
     *
     * @return string
     */
    public function getInitiator()
    {
        return $this->container['initiator'];
    }

    /**
     * Sets initiator
     *
     * @param string $initiator Indicates whether it is a merchant initiated or explicitly consented by card holder. Valid values are 'MERCHANT' and 'CARDHOLDER'
     *
     * @return $this
     */
    public function setInitiator($initiator)
    {
        $allowedValues = $this->getInitiatorAllowableValues();
        if (!is_null($initiator) && !in_array($initiator, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'initiator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['initiator'] = $initiator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


