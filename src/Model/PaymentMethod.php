<?php
/**
 * PaymentMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment Gateway API Specification.
 *
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FirstData\FirstApi\Client\Model;

use \ArrayAccess;
use \FirstData\FirstApi\Client\ObjectSerializer;

/**
 * PaymentMethod Class Doc Comment
 *
 * @category Class
 * @description Various payment methods the Gateway supports
 * @package  FirstData\FirstApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'paymentCard' => '\FirstData\FirstApi\Client\Model\PaymentCard',
        'paymentToken' => '\FirstData\FirstApi\Client\Model\PaymentTokenization',
        'sepa' => '\FirstData\FirstApi\Client\Model\Sepa',
        'payPal' => '\FirstData\FirstApi\Client\Model\PayPal',
        'aliPay' => '\FirstData\FirstApi\Client\Model\AliPay',
        'chinaDomestic' => '\FirstData\FirstApi\Client\Model\ChinaDomestic'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'paymentCard' => null,
        'paymentToken' => null,
        'sepa' => null,
        'payPal' => null,
        'aliPay' => null,
        'chinaDomestic' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'paymentCard' => 'paymentCard',
        'paymentToken' => 'paymentToken',
        'sepa' => 'sepa',
        'payPal' => 'payPal',
        'aliPay' => 'aliPay',
        'chinaDomestic' => 'chinaDomestic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'paymentCard' => 'setPaymentCard',
        'paymentToken' => 'setPaymentToken',
        'sepa' => 'setSepa',
        'payPal' => 'setPayPal',
        'aliPay' => 'setAliPay',
        'chinaDomestic' => 'setChinaDomestic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'paymentCard' => 'getPaymentCard',
        'paymentToken' => 'getPaymentToken',
        'sepa' => 'getSepa',
        'payPal' => 'getPayPal',
        'aliPay' => 'getAliPay',
        'chinaDomestic' => 'getChinaDomestic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_ALIPAY = 'ALIPAY';
    const TYPE_ALIPAY_PAYSECURE_US = 'ALIPAY_PAYSECURE_US';
    const TYPE_ALIPAY_DOMESTIC = 'ALIPAY_DOMESTIC';
    const TYPE_APM = 'APM';
    const TYPE_CUP_DOMESTIC = 'CUP_DOMESTIC';
    const TYPE_DEBITDE = 'DEBITDE';
    const TYPE_EMI = 'EMI';
    const TYPE_GIROPAY = 'GIROPAY';
    const TYPE_IDEAL = 'IDEAL';
    const TYPE_INDIAWALLET = 'INDIAWALLET';
    const TYPE_KLARNA = 'KLARNA';
    const TYPE_NETBANKING = 'NETBANKING';
    const TYPE_PAYMENT_CARD = 'PAYMENT_CARD';
    const TYPE_PAYMENT_TOKEN = 'PAYMENT_TOKEN';
    const TYPE_PAYPAL = 'PAYPAL';
    const TYPE_SEPA = 'SEPA';
    const TYPE_SOFORT = 'SOFORT';
    const TYPE_WALLET = 'WALLET';
    const TYPE_WECHAT_DOMESTIC = 'WECHAT_DOMESTIC';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ALIPAY,
            self::TYPE_ALIPAY_PAYSECURE_US,
            self::TYPE_ALIPAY_DOMESTIC,
            self::TYPE_APM,
            self::TYPE_CUP_DOMESTIC,
            self::TYPE_DEBITDE,
            self::TYPE_EMI,
            self::TYPE_GIROPAY,
            self::TYPE_IDEAL,
            self::TYPE_INDIAWALLET,
            self::TYPE_KLARNA,
            self::TYPE_NETBANKING,
            self::TYPE_PAYMENT_CARD,
            self::TYPE_PAYMENT_TOKEN,
            self::TYPE_PAYPAL,
            self::TYPE_SEPA,
            self::TYPE_SOFORT,
            self::TYPE_WALLET,
            self::TYPE_WECHAT_DOMESTIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['paymentCard'] = isset($data['paymentCard']) ? $data['paymentCard'] : null;
        $this->container['paymentToken'] = isset($data['paymentToken']) ? $data['paymentToken'] : null;
        $this->container['sepa'] = isset($data['sepa']) ? $data['sepa'] : null;
        $this->container['payPal'] = isset($data['payPal']) ? $data['payPal'] : null;
        $this->container['aliPay'] = isset($data['aliPay']) ? $data['aliPay'] : null;
        $this->container['chinaDomestic'] = isset($data['chinaDomestic']) ? $data['chinaDomestic'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of payment method. Note that PayPal can only process a 'CREDIT' transaction. Note that for requests we are now supporting only PAYMENT_CARD, SEPA, PAYPAL, ALIPAY. All this types are supported for response.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets paymentCard
     *
     * @return \FirstData\FirstApi\Client\Model\PaymentCard|null
     */
    public function getPaymentCard()
    {
        return $this->container['paymentCard'];
    }

    /**
     * Sets paymentCard
     *
     * @param \FirstData\FirstApi\Client\Model\PaymentCard|null $paymentCard paymentCard
     *
     * @return $this
     */
    public function setPaymentCard($paymentCard)
    {
        $this->container['paymentCard'] = $paymentCard;

        return $this;
    }

    /**
     * Gets paymentToken
     *
     * @return \FirstData\FirstApi\Client\Model\PaymentTokenization|null
     */
    public function getPaymentToken()
    {
        return $this->container['paymentToken'];
    }

    /**
     * Sets paymentToken
     *
     * @param \FirstData\FirstApi\Client\Model\PaymentTokenization|null $paymentToken paymentToken
     *
     * @return $this
     */
    public function setPaymentToken($paymentToken)
    {
        $this->container['paymentToken'] = $paymentToken;

        return $this;
    }

    /**
     * Gets sepa
     *
     * @return \FirstData\FirstApi\Client\Model\Sepa|null
     */
    public function getSepa()
    {
        return $this->container['sepa'];
    }

    /**
     * Sets sepa
     *
     * @param \FirstData\FirstApi\Client\Model\Sepa|null $sepa sepa
     *
     * @return $this
     */
    public function setSepa($sepa)
    {
        $this->container['sepa'] = $sepa;

        return $this;
    }

    /**
     * Gets payPal
     *
     * @return \FirstData\FirstApi\Client\Model\PayPal|null
     */
    public function getPayPal()
    {
        return $this->container['payPal'];
    }

    /**
     * Sets payPal
     *
     * @param \FirstData\FirstApi\Client\Model\PayPal|null $payPal payPal
     *
     * @return $this
     */
    public function setPayPal($payPal)
    {
        $this->container['payPal'] = $payPal;

        return $this;
    }

    /**
     * Gets aliPay
     *
     * @return \FirstData\FirstApi\Client\Model\AliPay|null
     */
    public function getAliPay()
    {
        return $this->container['aliPay'];
    }

    /**
     * Sets aliPay
     *
     * @param \FirstData\FirstApi\Client\Model\AliPay|null $aliPay aliPay
     *
     * @return $this
     */
    public function setAliPay($aliPay)
    {
        $this->container['aliPay'] = $aliPay;

        return $this;
    }

    /**
     * Gets chinaDomestic
     *
     * @return \FirstData\FirstApi\Client\Model\ChinaDomestic|null
     */
    public function getChinaDomestic()
    {
        return $this->container['chinaDomestic'];
    }

    /**
     * Sets chinaDomestic
     *
     * @param \FirstData\FirstApi\Client\Model\ChinaDomestic|null $chinaDomestic chinaDomestic
     *
     * @return $this
     */
    public function setChinaDomestic($chinaDomestic)
    {
        $this->container['chinaDomestic'] = $chinaDomestic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


